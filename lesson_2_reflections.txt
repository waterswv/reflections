Lesson 2 Reflections

What happens when you initialize a repository? Why do you need to do it?

	It creates a .git file that starts git tracking for the file system. This is the space where git will track all of your versions and commits for this set of files. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area holds files that are ready to be committed. It enables you to work on multiple files that pertain to change, if it's a complex feature or change it would be logical to commit all file changes together. 

How can you use the staging area to make sure you have one commit per logical change?

	By leveraging 'git diff --staged' you can compare changes that have been made in the staging area & working directory. From there you can decide which files should be committed together or seperately. 'git diff' with NO ARGUMENTS will compare changes in staging with the previous commmit as well to check where things stood before you began making changes. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	Branches are very helpful when a program requires multiple states ... a la different difficulty levels for a game ... or enabling the program to be accessed in different languages. You are able to keep the core functionality in a single state while making changes to satisfy the different requirements or languages. It also enables you to make global changes to all versions. 

How do the diagrams help you visualize the branch structure?

	Diagrams help you see the flow of each commit to it's parent. You can also see what commits have occurred on different branches. From there it will be helpful to see what commits would need to be merged to make your code whole to the master or collaborators. 

